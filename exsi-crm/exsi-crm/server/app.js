
// app.js
const express = require('express');
const http = require('http');
const mongoose = require('mongoose');
require('dotenv').config();

const app = express();
const server = http.createServer(app);

// Mount API routes nhÆ° trÆ°á»›c
app.use(express.json());
const contactRoutes = require('./routes/contactRoutes');
const ticketRoutes  = require('./routes/ticketRoutes');
app.use('/api/contacts', contactRoutes);
app.use('/api/tickets',  ticketRoutes);

// Káº¿t ná»‘i MongoDB
mongoose.connect(process.env.MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('Káº¿t ná»‘i MongoDB thÃ nh cÃ´ng'))
  .catch((err) => console.error('Káº¿t ná»‘i MongoDB tháº¥t báº¡i:', err));

// Thiáº¿t láº­p Socket.io
const { Server } = require('socket.io');
const io = new Server(server, {
  cors: { origin: '*' }
});

const Ticket = require('./models/ticketModel');

io.on('connection', socket => {
  console.log(`Client ${socket.id} káº¿t ná»‘i`);

  // Láº¯ng nghe sá»± kiá»‡n chatEnd
  socket.on('chatEnd', async data => {
    // data = { contactId, initiator, transcript }
    try {
      const { contactId, initiator, transcript } = data;

      // Táº¡o ticket tá»± Ä‘á»™ng
      const ticket = await Ticket.create({
        contact: contactId,
        subject: `Chat káº¿t thÃºc bá»Ÿi ${initiator}`,
        description: `Transcript:\n${transcript}`
      });

      // Gá»­i láº¡i ticket info cho client náº¿u cáº§n
      socket.emit('ticketCreated', ticket);
      console.log(`Táº¡o ticket ${ticket._id} tá»« chatEnd`);
    } catch (err) {
      console.error('Lá»—i khi táº¡o ticket tá»« chatEnd:', err);
      socket.emit('error', { message: err.message });
    }
  });

  socket.on('disconnect', () => {
    console.log(`Client ${socket.id} ngáº¯t káº¿t ná»‘i`);
  });
});

// Khá»Ÿi Ä‘á»™ng server qua HTTP server
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`ğŸš€ Server vÃ  Socket.io cháº¡y trÃªn cá»•ng ${PORT}`);
});
